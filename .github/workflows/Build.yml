name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: "5 0,12 * * *"

jobs:
  Build:
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Shanghai'
      SING_BOX_VERSION: 1.10.5
    
    steps: 
    - name: Checkout target repository
      uses: actions/checkout@v4.1.0
      with:
        repository: Amnesiash/ladder_rules_script
        path: ladder-repo

    - name: Run Bash Script
      run: |
        #!/bin/bash
        repo_name=$(basename "$GITHUB_REPOSITORY")
        if [[ "$repo_name" == "ladder_rules_script" ]]; then
          echo "Running in Tool repository"
          mkdir -p ladder-repo/Ruleset
          # 合并 China 规则
            urls=(
                "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/ChinaDomain.list"
                "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/ChinaCompanyIp.list"
                "https://raw.githubusercontent.com/ConnersHua/RuleGo/refs/heads/master/Surge/Ruleset/Direct.list"
            )
            > ladder-repo/Ruleset/China.list
            for url in "${urls[@]}"; do
                echo "Downloading: $url"
                curl -f -L "$url" >> ladder-repo/Ruleset/China.list || { echo "Download Failed: $url"; exit 1; }
                echo "" >> ladder-repo/Ruleset/China.list
            done

          # 合并 Direct 规则
            urls=(
                "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/UnBan.list"
                # "https://raw.githubusercontent.com/ConnersHua/RuleGo/refs/heads/master/Surge/Ruleset/Direct+.list"
            )
            > ladder-repo/Ruleset/Direct.list
            for url in "${urls[@]}"; do
                echo "Downloading: $url"
                curl -f -L "$url" >> ladder-repo/Ruleset/Direct.list || { echo "Download Failed: $url"; exit 1; }
                echo "" >> ladder-repo/Ruleset/Direct.list
            done

          # 合并 Proxy 规则
            urls=(
                "https://raw.githubusercontent.com/Amnesiash/ladder_rules_script/refs/heads/main/Clash/Custom/AddProxy.list"
                "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/ProxyGFWlist.list"
                "https://raw.githubusercontent.com/ConnersHua/RuleGo/refs/heads/master/Surge/Ruleset/Proxy.list"
            )
            > ladder-repo/Ruleset/Proxy.list
            for url in "${urls[@]}"; do
                echo "Downloading: $url"
                curl -f -L "$url" >> ladder-repo/Ruleset/Proxy.list || { echo "Download Failed: $url"; exit 1; }
                echo "" >> ladder-repo/Ruleset/Proxy.list
            done

          # 合并 ChinaMedia 规则
          urls=(
              "https://raw.githubusercontent.com/ConnersHua/RuleGo/refs/heads/master/Surge/Ruleset/Extra/Streaming/CN.list"
              "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/ChinaMedia.list"
          )
          > ladder-repo/Ruleset/ChinaMedia.list
          for url in "${urls[@]}"; do
              echo "Downloading: $url"
              curl -f -L "$url" >> ladder-repo/Ruleset/ChinaMedia.list || { echo "Download Failed: $url"; exit 1; }
              echo "" >> ladder-repo/Ruleset/ChinaMedia.list
          done

          # 合并 GlobalMedia 规则
          urls=(
              "https://raw.githubusercontent.com/ConnersHua/RuleGo/refs/heads/master/Surge/Ruleset/Extra/Streaming/!CN.list"
              "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/ProxyMedia.list"
          )
          > ladder-repo/Ruleset/GlobalMedia.list
          for url in "${urls[@]}"; do
              echo "Downloading: $url"
              curl -f -L "$url" >> ladder-repo/Ruleset/GlobalMedia.list || { echo "Download Failed: $url"; exit 1; }
              echo "" >> ladder-repo/Ruleset/GlobalMedia.list
          done

          # 合并 Apple 规则
          urls=(
              "https://raw.githubusercontent.com/ConnersHua/RuleGo/refs/heads/master/Surge/Ruleset/Extra/Apple/Apple.list"
              "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Apple.list"
          )
          > ladder-repo/Ruleset/Apple.list
          for url in "${urls[@]}"; do
              echo "Downloading: $url"
              curl -f -L "$url" >> ladder-repo/Ruleset/Apple.list || { echo "Download Failed: $url"; exit 1; }
              echo "" >> ladder-repo/Ruleset/Apple.list
          done
          
          # 合并 AI 规则
          urls=(
              "https://raw.githubusercontent.com/ConnersHua/RuleGo/refs/heads/master/Surge/Ruleset/Extra/AI.list"
              "https://raw.githubusercontent.com/Repcz/Tool/X/Surge/Custom/xAI.list"
              "https://raw.githubusercontent.com/Amnesiash/ladder_rules_script/main/Clash/Custom/AI.list"
              "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Ruleset/AI.list"
          )
          > ladder-repo/Ruleset/AI.list
          for url in "${urls[@]}"; do
              echo "Downloading: $url"
              curl -f -L "$url" >> ladder-repo/Ruleset/AI.list || { echo "Download Failed: $url"; exit 1; }
              echo "" >> ladder-repo/Ruleset/AI.list
          done

          # 下载规则
          files=(     
              # LAN
              "Lan.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/LocalAreaNetwork.list"    
              "WeChat.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/WeChat/WeChat.yaml"       
            )
            for file in "${files[@]}"; do
                set -- $file
                echo "Downloading: $2"
                curl -A "Surge iOS/3367" -f -L -o "ladder-repo/Ruleset/$1" "$2" || { echo "Download Failed: $2"; exit 1; }
            done
            echo "Files downloaded successfully."
        else
            echo "Unknown repository. Please run this script in either Tool or Tool repository."
            exit 1
        fi

    - name: Source build
      run: |
        for file in ladder-repo/Ruleset/*.list ; do
          if [ -f "$file" ]; then
            # 删除文件中所有 [以 # 或 ; 开头的注释行] + [空行] + [每行中 // 及其后面的内容]
            sed -i -e '/^\s*[#;]/d' -e '/^$/d' -e 's| //.*||' "$file"
            # 修正格式
            sed -i 's/, */,/g' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Source sort
      run: |
        for file in ladder-repo/Ruleset/*.list ; do
          if [ -f "$file" ]; then
            sed -i -E '/^IP-CIDR,/!{/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+/s/^/IP-CIDR,/}' "$file"
            sed -i -E '/^IP-CIDR6,/!{/^[a-fA-F0-9]+:|([a-fA-F0-9]+:+)+[a-fA-F0-9]+\/[0-9]+/s/^/IP-CIDR6,/}' "$file"
            awk '
            /^DOMAIN,/         { print "0 " $0; next }
            /^DOMAIN-SUFFIX,/  { print "1 " $0; next }
            /^DOMAIN-KEYWORD,/ { print "2 " $0; next }
            /^DOMAIN-WILDCARD,/{ print "3 " $0; next }
            /^IP-CIDR,/        { print "4 " $0; next }
            /^IP-CIDR6,/       { print "5 " $0; next }
            /^IP-ASN,/         { print "6 " $0; next }
            /^PROCESS-NAME,/   { print "7 " $0; next }
            /^URL-REGEX,/      { print "8 " $0; next }
            /^USER-AGENT,/     { print "9 " $0; next }
            /^GEOIP,/          { print "10 " $0; next }
            /^AND,/            { print "11 " $0; next }
            /^OR,/             { print "12 " $0; next }
            /^NOT,/            { print "13 " $0; next }
            /^DEST-PORT,/      { print "14 " $0; next }
                                { print "15 " $0; next }
            ' "$file" | sort -k1,1n -k2,2 | cut -d' ' -f2- > "$file.sorted" && mv "$file.sorted" "$file"
            awk '!seen[tolower($0)]++' "$file" > temp && mv temp "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Copy files
      run: |
        rm -rf ladder-repo/{Clash,Loon,Shadowrocket,QuantumultX}/Rules
        mkdir -p ladder-repo/{Clash,Loon,Shadowrocket,QuantumultX}/Rules
        for file in ladder-repo/Ruleset/*.list; do
          filename=$(basename "$file")
          for dir in Loon QuantumultX Shadowrocket; do
            mkdir -p "ladder-repo/$dir/Rules"
            cp "$file" "ladder-repo/$dir/Rules/$filename"
          done
          mkdir -p "ladder-repo/Clash/Rules"
          cp "$file" "ladder-repo/Clash/Rules/${filename%.*}.yaml"
        done
        # 检查复制结果
        echo "Loon:"
        ls -l ladder-repo/Loon/Rules || true
        echo "QuantumultX:"
        ls -l ladder-repo/QuantumultX/Rules || true
        echo "Shadowrocket:"
        ls -l ladder-repo/Shadowrocket/Rules || true
        echo "Clash:"
        ls -l ladder-repo/Clash/Rules || true
        echo "Files copied successfully."

    - name: Clash/Mihomo
      run: |
        rm -rf ladder-repo/Ruleset
        for file in ladder-repo/Clash/Rules/*.yaml; do
          if [ -f "$file" ]; then
            # 删除 USER-AGENT 和 URL-REGEX 规则
            sed -i -e '/^USER-AGENT/d' -e '/^URL-REGEX/d' "$file"
            # 给每行规则开头增加缩进和 “-”
            sed -i -e 's/^/  - /' "$file"
            # 新增一行 payload: 在最上方
            sed -i '1i payload:' "$file"
            # 计算排除了 payload 行的规则数量
            line_count=$(grep -v '^payload:' "$file" | wc -l)
            # 获取当前更新时间
            update_time=$(date +'%Y-%m-%d %H:%M:%S')
            # 在文件第一行和第二行添加更新时间和规则数量
            awk -v update_time="$update_time" 'NR==1 {print "# UpdateTime: " update_time} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# RuleCount: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: QuantumultX
      run: |
        for file in ladder-repo/QuantumultX/Rules/*.list; do
          if [ -f "$file" ]; then
            sed -i -e '/^URL-REGEX/d' "$file"
            sed -i -e '/^PROCESS-NAME/d' "$file"
            sed -i -e '/^AND/d' "$file"
            sed -i -e '/^OR/d' "$file"
            sed -i -e '/^NOT/d' "$file"
            sed -i -e '/^DEST-PORT/d' "$file"
            sed -i -e 's/^DOMAIN,/HOST,/g' "$file"
            sed -i -e 's/^DOMAIN-SUFFIX,/HOST-SUFFIX,/g' "$file"
            sed -i -e 's/^DOMAIN-KEYWORD,/HOST-KEYWORD,/g' "$file"
            sed -i -e 's/^DOMAIN-WILDCARD,/HOST-WILDCARD,/g' "$file"
            sed -i -e 's/^IP-CIDR6,/IP6-CIDR,/g' "$file"
            sed -i 's/,no-resolve//g' "$file"
          else
            echo "$file not found."
          fi
        done

        for file in ladder-repo/QuantumultX/Rules/*.list; do
          if [ -f "$file" ]; then
            file_names=$(basename "$file" .list)
            line_count=$(wc -l < "$file")
            awk -v policy="$file_names" '!/^#|^ *$/ {print $0","policy; next} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v fname="$file_names" 'NR==1 {print "# UpdateTime: " fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# RuleCount: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Loon
      run: |
        for file in ladder-repo/Loon/Rules/*.list; do
          if [ -f "$file" ]; then
            sed -i -e '/^PROCESS-NAME/d' "$file"
            file_names=$(basename "$file" .list)
            line_count=$(wc -l < "$file")
            awk -v fname="$file_names" 'NR==1 {print "# UpdateTime: " fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# RuleCount: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Shadowrocket
      run: |
        for file in ladder-repo/Shadowrocket/Rules/*.list; do
          if [ -f "$file" ]; then
            sed -i -e '/^PROCESS-NAME/d' "$file"
            file_names=$(basename "$file" .list)
            line_count=$(wc -l < "$file")
            awk -v fname="$file_names" 'NR==1 {print "# UpdateTime: " fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# RuleCount: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Push Update
      run: |
        cd ladder-repo
        if [[ -n $(git status -s) ]]; then
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"
          git add -A
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          git push origin main
        else
          echo "No changes to commit."
        fi

    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
